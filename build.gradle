plugins {
    id 'application'
    id 'java'
    id 'jacoco'
    id 'idea'
    id 'com.diffplug.gradle.spotless' version '3.27.1'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id "io.freefair.lombok" version "5.0.0-rc6"
}

repositories {
    mavenCentral()
    jcenter()
    google()
    maven { url 'https://www.jitpack.io' }
    maven { url 'https://apisite.crmyers.dev/maven' }
    maven { url 'https://maven.teamdev.com/repository/products' }
}

mainClassName = 'edu.wpi.cs3733.d20.teamL.Main'

dependencies {
    implementation(
            [group: 'edu.wpi.cs3733.c20.teamR', name: 'AppointmentRequest', version:'5.0.0'],
            'com.jfoenix:jfoenix:9.0.9',
            'mysql:mysql-connector-java:8.0.20',
            'org.apache.derby:derby:10.14.2.0',
            'org.apache.commons:commons-csv:1.8',
            'org.apache.commons:commons-math3:3.6.1',
            'org.slf4j:slf4j-api:1.7.30',
            'org.slf4j:slf4j-simple:1.7.30',
            'com.google.inject:guice:4.2.2',
            'com.twilio.sdk:twilio:7.49.1',
            'com.sendgrid:sendgrid-java:4.4.1',
            'com.github.kenglxn.QRGen:javase:2.6.0',
            'org.jetbrains:annotations:15.0',
            'com.github.kenglxn.QRGen:javase:2.6.0',
            'org.mindrot:jbcrypt:0.3m',
            [group: 'com.lynden', name: 'GMapsFX', version: '2.12.0']
    )

    compile 'com.teamdev.jxbrowser:jxbrowser-cross-platform:7.6'

    testImplementation(
            'org.junit.jupiter:junit-jupiter:5.6.0',
            'org.testfx:testfx-junit5:4.0.16-alpha'
    )
    testRuntimeOnly(
            'org.testfx:openjfx-monocle:jdk-11+26'
    )
}

javafx {
    version = "11.0.1"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.swing', 'javafx.web']

}

run {
    jvmArgs = ['--add-opens=javafx.base/com.sun.javafx.runtime=ALL-UNNAMED',
               '--add-opens=javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED',
               '--add-opens=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED',
               '--add-opens=javafx.base/com.sun.javafx.binding=ALL-UNNAMED',
               '--add-opens=javafx.base/com.sun.javafx.event=ALL-UNNAMED',
               '--add-opens=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED',
               '--add-opens=javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED'
    ]
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

def codeCoverageExcludes = [
        'edu.wpi.cs3733.d20.teamL.App',
        'edu.wpi.cs3733.d20.teamL.Main',
]

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            excludes = [
                    'edu.wpi.cs3733.d20.teamL.App',
                    'edu.wpi.cs3733.d20.teamL.Main',
            ]
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.25
            }
            excludes = [
                    'edu.wpi.cs3733.d20.teamL.App',
                    'edu.wpi.cs3733.d20.teamL.Main',
            ]
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.25
            }
            excludes = [
                    'edu.wpi.cs3733.d20.teamL.App',
                    'edu.wpi.cs3733.d20.teamL,Main',
            ]
        }
    }
}

// Uncomment if test cases actually matter
//check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport

/*compileJava.dependsOn 'spotlessApply'

// uncomment to enable spotless checking
spotless {
    java {
        // googleJavaFormat()
    }
}*/
